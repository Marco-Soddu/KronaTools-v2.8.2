#!/usr/bin/env python3
import os
import subprocess
import webbrowser
import shutil
import tkinter as tk
from tkinter import ttk, filedialog, messagebox

SCRIPT_OPTIONS = {
    # ————— Classification —————
    "ktClassifyBLAST": [
        ("t",   "Bit-score threshold (-t)",           float),
        ("f",   "Force root if unknown hits (-f)",    bool),
        ("r",   "Random sampling (-r)",               bool),
        ("p",   "Average % identity (-p)",            bool),
        ("b",   "Average bit-score (-b)",             bool),
        ("s",   "Summary counts/scores (-s)",         bool),
        ("e",   "E-value factor (-e)",                float),
    ],
    "ktClassifyHits": [
        ("t", "Score threshold (-t)",              float),
        ("r", "Random sampling (-r)",              bool),
        ("s", "Summary counts/scores (-s)",        bool),
    ],

    # ————— Krona data import —————
    "ktImportBLAST": [
        ("n",    "Root level name (-n)",               str),
        ("t",    "Bit-score threshold (-t)",           float),
        ("i",    "Include no-hits (-i)",               bool),
        ("f",    "Force root if unknown hits (-f)",    bool),
        ("r",    "Random sampling (-r)",               bool),
        ("p",    "Average % identity (-p)",            bool),
        ("b",    "Average bit-score (-b)",             bool),
        ("c",    "Combine files (-c)",                 bool),
        ("d",    "Max depth (-d)",                     int),
        ("k",    "Show 'cellular organisms' (-k)",     bool),
        ("K",    "Collapse no-ranks (-K)",             bool),
        ("x",    "Tint bad scores (-x)",               int),
        ("y",    "Tint good scores (-y)",              int),
        ("u",    "Krona resources URL (-u)",           str),
        ("post", "POST URL for IDs (-post)",           str),
        ("tax",  "Local taxonomy DB path (-tax)",      str),
        ("e",    "E-value factor (-e)",                float),
    ],
    "ktImportHits": [
        ("n",    "Root level name (-n)",               str),
        ("t",    "Score threshold (-t)",               float),
        ("i",    "Include no-hits (-i)",               bool),
        ("r",    "Random sampling (-r)",               bool),
        ("c",    "Combine files (-c)",                 bool),
        ("d",    "Max depth (-d)",                     int),
        ("k",    "Show 'cellular organisms' (-k)",     bool),
        ("K",    "Collapse no-ranks (-K)",             bool),
        ("x",    "Tint bad scores (-x)",               int),
        ("y",    "Tint good scores (-y)",              int),
        ("u",    "Krona resources URL (-u)",           str),
        ("post", "POST URL for IDs (-post)",           str),
        ("tax",  "Local taxonomy DB path (-tax)",      str),
    ],
    "ktImportKrona": [
        ("n",    "Root level name (-n)",               str),
        ("c",    "Combine files (-c)",                 bool),
        ("d",    "Max depth (-d)",                     int),
        ("x",    "Tint bad scores (-x)",               int),
        ("y",    "Tint good scores (-y)",              int),
        ("u",    "Krona resources URL (-u)",           str),
        ("post", "POST URL for IDs (-post)",           str),
    ],
    "ktImportDiskUsage": [
        ("u",    "Krona resources URL (-u)",           str),
    ],
    "ktImportEC": [
        ("n",    "Root level name (-n)",               str),
        ("c",    "Combine files (-c)",                 bool),
        ("q",    "Query ID column (-q)",               int),
        ("e",    "EC column (-e)",                     int),
        ("s",    "Score column (-s)",                  int),
        ("m",    "Magnitude column (-m)",              int),
        ("i",    "Include no-hits (-i)",               bool),
        ("d",    "Max depth (-d)",                     int),
        ("x",    "Tint bad scores (-x)",               int),
        ("y",    "Tint good scores (-y)",              int),
        ("u",    "Krona resources URL (-u)",           str),
        ("post", "POST URL for IDs (-post)",           str),
    ],
    "ktImportFCP": [
        ("n",    "Root level name (-n)",               str),
        ("c",    "Combine files (-c)",                 bool),
        ("d",    "Max depth (-d)",                     int),
        ("u",    "Krona resources URL (-u)",           str),
        ("post", "POST URL for IDs (-post)",           str),
    ],
    "ktImportGalaxy": [
        ("n",    "Root level name (-n)",               str),
        ("c",    "Combine files (-c)",                 bool),
        ("d",    "Max depth (-d)",                     int),
        ("u",    "Krona resources URL (-u)",           str),
        ("post", "POST URL for IDs (-post)",           str),
    ],
    "ktImportMETAREP-BLAST": [
        ("n",    "Root level name (-n)",               str),
        ("r",    "Random sampling (-r)",               bool),
        ("p",    "Average % identity (-p)",            bool),
        ("b",    "Average bit-score (-b)",             bool),
        ("c",    "Combine files (-c)",                 bool),
        ("d",    "Max depth (-d)",                     int),
        ("k",    "Show 'cellular organisms' (-k)",     bool),
        ("K",    "Collapse no-ranks (-K)",             bool),
        ("x",    "Tint bad scores (-x)",               int),
        ("y",    "Tint good scores (-y)",              int),
        ("u",    "Krona resources URL (-u)",           str),
        ("post", "POST URL for IDs (-post)",           str),
        ("tax",  "Local taxonomy DB path (-tax)",      str),
        ("v",    "Verbose (-v)",                       bool),
    ],
    "ktImportMETAREP-EC": [
        ("n",    "Root level name (-n)",               str),
        ("c",    "Combine files (-c)",                 bool),
        ("i",    "Include no-hits (-i)",               bool),
        ("d",    "Max depth (-d)",                     int),
        ("u",    "Krona resources URL (-u)",           str),
        ("post", "POST URL for IDs (-post)",           str),
        ("v",    "Verbose (-v)",                       bool),
    ],
    "ktImportMGRAST": [
        ("n",    "Root level name (-n)",               str),
        ("c",    "Combine files (-c)",                 bool),
        ("d",    "Max depth (-d)",                     int),
        ("x",    "Tint bad scores (-x)",               int),
        ("y",    "Tint good scores (-y)",              int),
        ("p",    "Average % identity (-p)",            bool),
        ("u",    "Krona resources URL (-u)",           str),
    ],
    "ktImportPhymmBL": [
        ("n",    "Root level name (-n)",               str),
        ("m",    "Minimum confidence (-m)",            float),
        ("c",    "Combine files (-c)",                 bool),
        ("d",    "Max depth (-d)",                     int),
        ("x",    "Tint bad scores (-x)",               int),
        ("y",    "Tint good scores (-y)",              int),
        ("p",    "Phymm-only mode (-p)",               bool),
        ("u",    "Krona resources URL (-u)",           str),
        ("post", "POST URL for IDs (-post)",           str),
    ],
    "ktImportRDP": [
        ("n",    "Root level name (-n)",               str),
        ("c",    "Combine files (-c)",                 bool),
        ("m",    "Minimum confidence (-m)",            float),
        ("d",    "Max depth (-d)",                     int),
        ("x",    "Tint bad scores (-x)",               int),
        ("y",    "Tint good scores (-y)",              int),
        ("u",    "Krona resources URL (-u)",           str),
        ("post", "POST URL for IDs (-post)",           str),
    ],
    "ktImportRDPComparison": [
        ("n",    "Root level name (-n)",               str),
        ("d",    "Max depth (-d)",                     int),
        ("x",    "Tint bad scores (-x)",               int),
        ("y",    "Tint good scores (-y)",              int),
        ("u",    "Krona resources URL (-u)",           str),
    ],
    "ktImportTaxonomy": [
        ("n",    "Root level name (-n)",               str),
        ("i",    "Include no-hits (-i)",               bool),
        ("c",    "Combine files (-c)",                 bool),
        ("q",    "Query ID column (-q)",               int),
        ("t",    "TaxID column (-t)",                  int),
        ("s",    "Score column (-s)",                  int),
        ("m",    "Magnitude column (-m)",              int),
        ("d",    "Max depth (-d)",                     int),
        ("k",    "Show 'cellular organisms' (-k)",     bool),
        ("K",    "Collapse no-ranks (-K)",             bool),
        ("x",    "Tint bad scores (-x)",               int),
        ("y",    "Tint good scores (-y)",              int),
        ("u",    "Krona resources URL (-u)",           str),
        ("post", "POST URL for IDs (-post)",           str),
        ("tax",  "Local taxonomy DB path (-tax)",      str),
    ],
    "ktImportText": [
        ("n",    "Root level name (-n)",               str),
        ("q",    "No magnitude field (-q)",            bool),
        ("c",    "Combine files (-c)",                 bool),
        ("u",    "Krona resources URL (-u)",           str),
    ],
    "ktImportXML": [
        ("u",    "Krona resources URL (-u)",           str),
    ],

    # ————— Utility tools —————
    "ktGetContigMagnitudes": [],
    "ktGetLCA": [
        ("s", "Streaming mode (-s)", bool)
    ],
    "ktGetLibPath": [],
    "ktGetTaxIDFromAcc": [
        ("p",    "Prepend taxID (-p)",               bool),
        ("a",    "Append taxID (-a)",                bool),
        ("f",    "Accession field number (-f)",      int),
        ("tax",  "Local taxonomy DB path (-tax)",    str),
    ],
    "ktGetTaxInfo": [
        ("p",    "Prepend info (-p)",                bool),
        ("a",    "Append info (-a)",                 bool),
        ("f",    "Accession field number (-f)",      int),
        ("tax",  "Local taxonomy DB path (-tax)",    str),
    ],
}

class KronaGUI(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("KronaTools GUI")
        self.geometry("650x600")
        self._configure_style()

        # Auto-detect: PATH then standard directories
        self.binpath = self.detect_krona_bin_path()
        if not self.binpath:
            messagebox.showerror(
                "KronaTools Not Found",
                "Unable to locate ktImportBLAST.\n"
                "Please ensure KronaTools is installed (default: /usr/local/bin).\n"
                "Or add its install directory to your $PATH."
            )
            self.destroy()
            return

        # Discover all kt* scripts
        try:
            self.scripts = sorted(
                f for f in os.listdir(self.binpath)
                if f.startswith("kt") and os.access(os.path.join(self.binpath, f), os.X_OK)
            )
        except Exception:
            self.scripts = []

        # Load static options for each script
        self.script_options = {scr: SCRIPT_OPTIONS.get(scr, []) for scr in self.scripts}

        self._build_widgets()

    def detect_krona_bin_path(self):
        """
        1) Look for ktImportBLAST in PATH
        2) Otherwise check typical install locations:
           - /usr/local/bin (default)
           - /usr/bin
           - ../bin relative to this script
        """
        kt_tool = shutil.which("ktImportBLAST")
        if kt_tool:
            return os.path.dirname(kt_tool)

        candidates = [
            "/usr/local/bin",
            "/usr/bin",
            os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "bin"))
        ]
        for d in candidates:
            exe = os.path.join(d, "ktImportBLAST")
            if os.path.isfile(exe) and os.access(exe, os.X_OK):
                return d
        return None

    def _configure_style(self):
        style = ttk.Style(self)
        style.theme_use('clam')
        style.configure('TLabel', font=('Segoe UI', 10))
        style.configure('TButton', font=('Segoe UI', 10, 'bold'), padding=6)
        style.configure('TEntry', padding=4)
        style.configure('TCheckbutton', padding=4)
        style.configure('TLabelframe', padding=8)
        style.configure('TLabelframe.Label', font=('Segoe UI', 10, 'bold'))
        style.map('TButton',
                  background=[('active', '#67aeee'), ('!active', '#1670bf')],
                  foreground=[('!disabled', '#fff')])

    def _build_widgets(self):
        # Script selection
        ttk.Label(self, text="Script:").grid(row=0, column=0, sticky='w', padx=10, pady=(10,0))
        self.script_var = tk.StringVar(value=self.scripts[0] if self.scripts else "")
        combo = ttk.Combobox(self, values=self.scripts, textvariable=self.script_var, state='readonly')
        combo.grid(row=0, column=1, columnspan=2, sticky='ew', padx=10, pady=(10,0))
        combo.bind('<<ComboboxSelected>>', lambda e: self._on_script_change(self.script_var.get()))
        ttk.Separator(self, orient='horizontal').grid(row=1, column=0, columnspan=3, sticky='ew', padx=10, pady=5)

        # Input file
        self.file_frame = ttk.Labelframe(self, text="Input File")
        self.file_frame.grid(row=2, column=0, columnspan=3, sticky='ew', padx=10)
        self._build_file_selector(self.file_frame, "input_file", 0, self._on_input_select)

        # Magnitudes file (hidden by default)
        self.mag_frame = ttk.Labelframe(self, text="Magnitudes File")
        self.mag_frame.grid(row=3, column=0, columnspan=3, sticky='ew', padx=10, pady=(5,0))
        self._build_file_selector(self.mag_frame, "mag_file", 0, self._on_mag_select)
        self.mag_frame.grid_remove()

        # Output settings
        ttk.Separator(self, orient='horizontal').grid(row=4, column=0, columnspan=3, sticky='ew', padx=10, pady=5)
        out_frame = ttk.Labelframe(self, text="Output")
        out_frame.grid(row=5, column=0, columnspan=3, sticky='ew', padx=10)

        self.out_place = tk.BooleanVar(value=True)
        ttk.Radiobutton(out_frame, text="Same folder as input",
                        variable=self.out_place, value=True,
                        command=self._update_out_name).grid(row=0, column=0, sticky='w', padx=5)
        ttk.Radiobutton(out_frame, text="Choose a folder...",
                        variable=self.out_place, value=False,
                        command=self._on_out_dir_toggle).grid(row=1, column=0, sticky='w', padx=5)

        self.out_dir = tk.StringVar()
        self.out_dir_entry = ttk.Entry(out_frame, textvariable=self.out_dir)
        self.out_dir_entry.grid(row=2, column=0, columnspan=2, sticky='ew', padx=5)
        ttk.Button(out_frame, text="Browse...", command=self._on_out_dir_select).grid(row=2, column=2, padx=5)

        ttk.Label(out_frame, text="Output name:").grid(row=3, column=0, sticky='w', padx=5, pady=(5,0))
        self.out_name = tk.StringVar()
        ttk.Entry(out_frame, textvariable=self.out_name).grid(row=3, column=1, columnspan=2, sticky='ew', padx=5)

        # Options frame
        ttk.Separator(self, orient='horizontal').grid(row=6, column=0, columnspan=3, sticky='ew', padx=10, pady=5)
        self.opt_frame = ttk.Labelframe(self, text="Specific Options")
        self.opt_frame.grid(row=7, column=0, columnspan=3, sticky='nsew', padx=10, pady=(0,5))
        self.rowconfigure(7, weight=1)
        self.columnconfigure(1, weight=1)

        # Generate and Reset buttons
        ttk.Button(self, text="Generate", command=self._on_generate).grid(row=8, column=1, sticky='e', padx=5, pady=10)
        ttk.Button(self, text="Reset", command=self._on_reset).grid(row=8, column=2, sticky='w', padx=5, pady=10)

        # Initialize options for first script
        if self.scripts:
            self._on_script_change(self.script_var.get())

    def _build_file_selector(self, parent, varname, row, command):
        setattr(self, varname, tk.StringVar())
        ttk.Entry(parent, textvariable=getattr(self, varname)).grid(row=row, column=0, sticky='ew', padx=5, pady=5)
        ttk.Button(parent, text="Select...", command=command).grid(row=row, column=1, padx=5)
        parent.columnconfigure(0, weight=1)

    def _on_input_select(self):
        path = filedialog.askopenfilename()
        if path:
            self.input_file.set(path)
            self._update_out_name()

    def _on_mag_select(self):
        path = filedialog.askopenfilename()
        if path:
            self.mag_file.set(path)

    def _on_out_dir_select(self):
        directory = filedialog.askdirectory()
        if directory:
            self.out_dir.set(directory)

    def _on_out_dir_toggle(self):
        if self.out_place.get():
            self.out_dir_entry.grid_remove()
        else:
            self.out_dir_entry.grid()

    def _update_out_name(self, *_):
        base = os.path.splitext(os.path.basename(self.input_file.get()))[0]
        self.out_name.set(f"{base}.{self.script_var.get()}.html")

    def _on_reset(self):
        self.script_var.set(self.scripts[0])
        self.input_file.set("")
        self.mag_file.set("")
        self.out_dir.set("")
        self.out_place.set(True)
        self._update_out_name()
        self._on_script_change(self.script_var.get())

    def _on_script_change(self, script):
        # Show magnitudes frame for certain scripts
        if script in ("ktImportBLAST", "ktImportHits", "ktImportEC"):
            self.mag_frame.grid()
        else:
            self.mag_frame.grid_remove()

        # Clear previous option widgets
        for widget in self.opt_frame.winfo_children():
            widget.destroy()

        options = self.script_options.get(script, [])
        self.opt_vars = {}

        for idx, (name, desc, arg_type) in enumerate(options):
            if arg_type is bool:
                var = tk.BooleanVar()
                chk = ttk.Checkbutton(self.opt_frame, text=desc, variable=var)
                chk.grid(row=idx, column=0, columnspan=2, sticky='w', padx=5, pady=2)
                self.opt_vars[name] = var
            else:
                enabled = tk.BooleanVar()
                value = tk.StringVar()
                chk = ttk.Checkbutton(self.opt_frame, text=desc, variable=enabled)
                chk.grid(row=idx, column=0, sticky='w', padx=5, pady=2)
                entry = ttk.Entry(self.opt_frame, textvariable=value)
                entry.grid_remove()
                self.opt_frame.columnconfigure(1, weight=1)
                def make_toggle(e, flag, row=idx):
                    def toggle(*_):
                        if flag.get():
                            e.grid(row=row, column=1, sticky='ew', padx=5, pady=2)
                        else:
                            e.grid_remove()
                    return toggle
                toggle_fn = make_toggle(entry, enabled)
                enabled.trace_add('write', lambda *a, fn=toggle_fn: fn())
                toggle_fn()
                self.opt_vars[name] = (enabled, value)

    def _on_generate(self):
        if not self.input_file.get():
            return messagebox.showerror("Error", "Please select an input file.")
        output_dir = (os.path.dirname(self.input_file.get()) if self.out_place.get() else self.out_dir.get())
        if not os.path.isdir(output_dir):
            return messagebox.showerror("Error", "Invalid output directory.")

        cmd = [os.path.join(self.binpath, self.script_var.get()),
               "-o", os.path.join(output_dir, self.out_name.get()),
               self.input_file.get()]
        if hasattr(self, 'mag_file') and self.mag_file.get():
            cmd += [":", self.mag_file.get()]

        for name, var in self.opt_vars.items():
            if isinstance(var, tuple):
                enabled, val_var = var
                val = val_var.get().strip()
                if enabled.get() and val:
                    cmd.extend([f"-{name}", val])
            else:
                if var.get():
                    cmd.append(f"-{name}")

        try:
            subprocess.run(cmd, check=True)
            messagebox.showinfo("Completed", "The script ran successfully.")
            html_file = os.path.abspath(os.path.join(output_dir, self.out_name.get()))
            if shutil.which("xdg-open"):
                subprocess.run(["xdg-open", html_file])
            else:
                webbrowser.open(f"file://{html_file}")
        except Exception as e:
            messagebox.showerror("Error", f"Execution failed:\n{e}")

if __name__ == "__main__":
    KronaGUI().mainloop()

